import _ from 'lodash'

// Scroll to a section/element on the page
export function selectContent(path) {
  const elements = Array.from(document.querySelectorAll('[data-sw-path]'))
  const element = elements.find(el => el.dataset.swPath === path)

  if (!element) return

  element.scrollIntoView({
    behavior: 'smooth',
    block: 'center'
  })
}

// Override a root CSS variable
export function setCssVariable(path, value) {
  // Bail if settings group is not used for CSS variable generation
  const groupKey = path.split('.')[0]
  const variableGroups = getVariableGroups()
  if (!variableGroups.includes(groupKey)) return

  const variableName = `--${path.replace(/\./g, '-')}`
  // Set inline variable
  const root = document.documentElement
  root.style.setProperty(variableName, value)
}

// Generate stylesheet string with root CSS variables
export function generateCssVariableStylesheet(storeSettings) {
  const keyNames = getVariableGroups()
  const variables = generateCssVariables(storeSettings, keyNames)

  return (
    '/*\n' +
    '!!! AUTOGENERATED FILE !!!\n' +
    'If using swell-editor module, this file will be regenerated for every build.\n' +
    '*/\n' +
    `:root {\n${variables.join('\n')}\n}`
  )
}

function getVariableGroups() {
  const defaultGroups = ['colors', 'fonts']
  const optionsGroups = '<%= options.cssVariableGroups %>'
  const customGroups = optionsGroups ? optionsGroups.split(',') : []
  const mergedGroups = new Set([...defaultGroups, ...customGroups])

  return Array.from(mergedGroups)
}

// Generate list of CSS variables with values
function generateCssVariables(settings, keyNames) {
  const variables = []

  keyNames.map((group, index) => {
    // Put a space after each group to make scanning easier
    if (index > 0) {
      variables.push('\n')
    }

    // Convert nested properties into flattened kebab case object
    const palette = flattenColorPalette(settings[group])
    // Turn each property into a CSS variable name with value
    for (const [key, value] of Object.entries(palette)) {
      variables.push(`  --${group}-${key}: ${value};`)
    }
  })

  return variables
}

// https://github.com/tailwindcss/tailwindcss/blob/master/src/util/flattenColorPalette.js
function flattenColorPalette(colors) {
  const result = _(colors)
    .flatMap((color, name) => {
      if (!_.isObject(color)) {
        return [[name, color]]
      }

      return _.map(color, (value, key) => {
        const suffix = key === 'default' ? '' : `-${key}`
        return [`${name}${suffix}`, value]
      })
    })
    .fromPairs()
    .value()

  return result
}
